// 센서 포트 배치
// Light        S3
// UltraSonic   S2

// 모터 포트 배치
// Left     OUT_B
// Right    OUT_C
// 모터 역방향 회전이 전진임

#define DIST_WALL 21 // 장애물을 감지할 거리
#define STDPWR 55 // 전진 모터 구동 파워
#define PivotPower 30 // 방향 전환시 모터 구동 파워

/* 최대/최소값 조정 코드 */
#define ScanMinMax(value,min,max) \
    if(value < min) \
        min = value; \
    if(value > max) \
        max = value;

long t; // 명령 반복 시간을 나타내기 위한 변수
char k; //
unsigned int min, max, avg, tmp; // 빛센서 수치 계산을 위한 변수들
int dist;
char i;

/* 모터 수치를 조절하는 함수 */
sub MotorControl(int l_pwr, int r_pwr)
{
    OnFwd(OUT_B, -l_pwr);
    OnFwd(OUT_C, -r_pwr);
}


/* 지정한 각도만큼 본체를 회전시키는 함수 */
sub PivotBody(long pivotDegree)
{
    char j;
    
    if(pivotDegree < 0)
    {
        j = -100;
    }
    else
    {
        j = 100;
    }
    RotateMotorExPID(OUT_BC, PivotPower, (pivotDegree * 130 / 100), j, 1, 1, PID_2, PID_2, PID_2);

    // 모터의 회전 각도는 실험적 수치에 의해 비례상수를 결정하여 곱한다.
    // 본 로봇에서는 상수가 130 / 100 이다.
    // 수학적으로 계산했을 때의 예상값과 생각보다 많이 다르다.
    
    Off(OUT_BC);
}


/* 라인트레이싱을 위한 빛센서 수치 기준값을 계산하기 위한 함수 */
sub CalibrateLightSensor()
{
    max = 0;
    min = 1023;

    t = CurrentTick() + 1500;
    
    // 한 쪽으로 돌면서 최대/최소 센서 수치 저장
    MotorControl(PivotPower, -PivotPower);
    while(t > CurrentTick())
    {
        tmp = SensorRaw(S3);

        ScanMinMax(tmp, min, max);
    }

    t = CurrentTick() + 1500;

    //반대로 돌면서도 최대/최소 센서 수치를 저장
    MotorControl(-PivotPower, PivotPower);
    while(t > CurrentTick())
    {
        tmp = SensorRaw(S3);

        ScanMinMax(tmp, min, max);
    }
    Off(OUT_BC); // 원위치로 돌아오면 일단 정지
    
    avg = (min + max) / 2;
}


/* 라인에서 벗어났을 때 라인 방향으로 본체를 돌리는 함수 */
sub LineFollow()
{
    // 오른쪽 우선 검사
    if(i == 0)
    {
        k = 0;


        // 오른쪽으로 약 90도 돌면서 라인이 있는지 찾는다.
        t = CurrentTick() + 450;
        MotorControl(30, -30);

        while(t > CurrentTick())
        {
            //라인을 찾았다면 멈추고 k를 1로 만든다.
            if(avg <= SensorRaw(S3) + (avg / 7))
            {
                // Wait(50);
                Off(OUT_BC);
                k = 1;
                break;
            }

            
            /*
            MotorControl(40, -40);
            Wait(150);
            Off(OUT_BC);
            */
        }

        // 오른쪽에서 라인을 못 찾았다면
        if(k != 1)
        {
            // 왼쪽으로 약 90도 돌면서 라인을 찾는다.
            t = CurrentTick() + 900;
            MotorControl(-30, 30);

            while(t > CurrentTick())
            {
                if(avg <= SensorRaw(S3) + (avg / 7))
                {
                    // Wait(50);
                    Off(OUT_BC);
                    k = -1;
                    break;
                }
            }
            
            /*
            // 방향 보정
            MotorControl(-40, 40);
            Wait(150);
            Off(OUT_BC);
            */
        }

        
        if(k == 1)
            i = 0;
            
        if(k != 1)
            i = 1;
    }
    
    
    // 왼쪽 우선 검사
    if(i == 1)
    {
        k = 0;

        // 왼쪽으로 약 90도 돌면서 라인이 있는지 찾는다.
        t = CurrentTick() + 450;
        MotorControl(-30, 30);

        while(t > CurrentTick())
        {
            //라인을 찾았다면 멈추고 k를 1로 만든다.
            if(avg <= SensorRaw(S3) + (avg / 7))
            {
                // Wait(50);
                Off(OUT_BC);
                k = 1;
                break;
            }
            


            /*
            MotorControl(-40, 40);
            Wait(150);
            Off(OUT_BC);
            */
        }

        // 왼쪽에서 라인을 못 찾았다면
        if(k != 1)
        {
            // 오른쪽으로 약 90도 돌면서 라인을 찾는다.
            t = CurrentTick() + 900;
            MotorControl(30, -30);

            while(t > CurrentTick())
            {
                if(avg <= SensorRaw(S3) + (avg / 7))
                {
                    // Wait(50);
                    Off(OUT_BC);
                    k = -1;
                    break;
                }
            }
            

            
            // 방향 보정
            /*
            MotorControl(40, -40);
            Wait(150);
            Off(OUT_BC);
            */
        }
        
        if(k == 1)
            i = 1;
            
        if(k != 1)
            i = 0;
    }
    
    // Off(OUT_BC);
}


/* 장애물을 피해서 지나간 다음 라인으로 복귀하는 함수 */
sub goByWall()
{

    // 왼쪽으로 방향을 튼다
    PivotBody(-105);
    Wait(350);
    
    if(SensorUS(S2) > DIST_WALL + 6)
    {
        PivotBody(-15);
        //  장애물을 돌아가면서 라인으로 접근한다
        OnFwdSyncPID(OUT_BC, -70, 15, PID_1, PID_1, PID_1);
        while(SensorRaw(S3) < avg + (avg / 10));
        while(SensorRaw(S3) > avg); // 라인을 살짝 지나치도록 한다.
        Off(OUT_BC);
        Wait(150);
        
        // 방향 복귀
        MotorControl(-30, 30);
        while(SensorRaw(S3) < avg + (avg / 10));
        Wait(150);
        // 라인에 복귀 완료
        
        i = 1;
    }
    
    // 왼쪽이 막힌 경우
    else
    {
        PivotBody(190);
        
        // ㄷ 모양 구간(끝)일 경우
        if(SensorUS(S2) < DIST_WALL + 6)
        {
            PivotBody(-95);
            OnFwdSyncPID(OUT_BC, 40, 0, PID_1, PID_1, PID_1);
            Wait(2500);
            Off(OUT_BC);
            Stop(true);
            //StopAllTasks();
        }
        
        else
        {
            PivotBody(20);
            OnFwdSyncPID(OUT_BC, -70, -17, PID_1, PID_1, PID_1);
            while(SensorRaw(S3) < avg + (avg / 10));
            while(SensorRaw(S3) > avg); // 라인을 살짝 지나치도록 한다.
            Off(OUT_BC);
            Wait(150);

            // 방향 복귀
            OnFwdSyncPID(OUT_BC, -40, 100, PID_1, PID_1, PID_1);
            while(SensorRaw(S3) < avg + (avg / 10));
            Wait(150);
        }
    }
    

    
    
}

task main()
{
    SetSensorType(S3, SENSOR_TYPE_LIGHT_ACTIVE); // 빛센서를 송광부를 켠 상태로 초기화
    SetSensorMode(S3, SENSOR_MODE_RAW); // 빛센서 모드는 Raw(값 범위 (unsigned int) 0~1024)
    SetSensorLowspeed(S2); // UltraSonic 거리 센서 초기화
    
    CalibrateLightSensor(); // 라인트레이싱 센서값 조정

    i = 0;

    while(true)
    {
        // 장애물이 가까울 때
        if(SensorUS(S2) < DIST_WALL)
        {
            Off(OUT_BC);
            goByWall();
        }
        
        // 장애물이 없고 검은 선 위에 있다면 직진한다.
        else if(avg < SensorRaw(S3))
        {
            OnFwdSyncPID(OUT_BC, -STDPWR, -2, PID_1, PID_1, PID_1);
        }

        // 검은 선 위에 있지 않다면 선을 찾아서 그 방향으로 튼다.
        else if(avg > SensorRaw(S3))
        {
            LineFollow();
            OnFwdSyncPID(OUT_BC, -STDPWR, 0, PID_1, PID_1, PID_1);
        }
        
        else
        {
            OnFwdSyncPID(OUT_BC, -STDPWR, -2, PID_1, PID_1, PID_1);
        }
    }
}
